// $breakpoints: (
//   small: '0px',
//   medium: '670px',
//   large: '968px',
//   extralarge: '1400px'
// ) !default;

$breakpoints: (
  0: (small, 0),
  1: (medium, 660),
  2: (large, 860),
  3: (extralarge, 1044)
);


@mixin when-breakpoint($breakpoint) {
 @each $key, $value in $breakpoints {
    $name: nth($value, 1);
    $measure: nth($value, 2);
    @if $breakpoint == $name {
      @if $measure == 0 {
        @content;
      } @else {
        @media (min-width: $measure+px) {
          @content;
        }
      }
    }
  }
}

@mixin when-breakpoint-only($breakpoint) {
 @each $key, $value in $breakpoints {
    $name: nth($value, 1);
    $measure: nth($value, 2);
    @if $breakpoint == $name {
      $breakpoint-end: map-get($breakpoints, $key + 1);
      $measure-end: nth($breakpoint-end, 2) - 1;
      @if $breakpoint-end {
        @media (min-width: $measure+px) and (max-width: $measure-end+px) {
          @content;
        }
      } @else {
        @media (min-width: $measure+px) {
          @content;
        }
      }
    }
  }
}

@mixin when-below-breakpoint($breakpoint) {
 @each $key, $value in $breakpoints {
    $name: nth($value, 1);
    $measure: nth($value, 2);
    @if $breakpoint == $name {
      @if $measure == 0 {
        @content;
      } @else {
        @media (max-width: $measure+px) {
          @content;
        }
      }
    }
  }
}

@mixin position($type: relative, $top: 0px, $right: null, $bottom: null, $left: null) {
// @mixin position($type, $coords) {

  @if not $right {
    $right: $top;
  }

  @if not $bottom {
    $bottom: $top;
  }

  @if not $left {
    $left: $right;
  }

  bottom: $bottom;
  left: $left;
  position: $type;
  right: $right;
  top: $top;
}

@mixin grad-bkgd($start) {
  $end: adjust-lightness($start, -4%);
  @include background-image(linear-gradient($start, $end));
}

@function cubicBezierTransition($property) {
  @return $property 800ms cubic-bezier(0.260, 0.860, 0.440, 0.985)
}